import BigNumber from 'bignumber.js';
import { Context, DefaultPortfolio, Identity, Namespace, NumberedPortfolio } from "../../../internal";
import { HistoricSettlement, PaginationOptions, ProcedureMethod, ResultSet } from "../../../types";
/**
 * Handles all Portfolio related functionality on the Identity side
 */
export declare class Portfolios extends Namespace<Identity> {
    /**
     * @hidden
     */
    constructor(parent: Identity, context: Context);
    /**
     * Retrieve all the Portfolios owned by this Identity
     */
    getPortfolios(): Promise<[DefaultPortfolio, ...NumberedPortfolio[]]>;
    /**
     * Retrieve all Portfolios custodied by this Identity.
     *   This only includes portfolios owned by a different Identity but custodied by this one.
     *   To fetch Portfolios owned by this Identity, use {@link getPortfolios}
     *
     * @note supports pagination
     */
    getCustodiedPortfolios(paginationOpts?: PaginationOptions): Promise<ResultSet<DefaultPortfolio | NumberedPortfolio>>;
    /**
     * Retrieve a Numbered Portfolio or the Default Portfolio if Portfolio ID is not passed
     *
     * @param args.portfolioId - optional, defaults to the Default Portfolio
     */
    getPortfolio(): Promise<DefaultPortfolio>;
    getPortfolio(args: {
        portfolioId: BigNumber;
    }): Promise<NumberedPortfolio>;
    /**
     * Delete a Portfolio by ID
     *
     * @note required role:
     *   - Portfolio Custodian
     */
    delete: ProcedureMethod<{
        portfolio: BigNumber | NumberedPortfolio;
    }, void>;
    /**
     * Retrieve a list of transactions where this identity was involved. Can be filtered using parameters
     *
     * @param filters.account - Account involved in the settlement
     * @param filters.ticker - ticker involved in the transaction
     *
     * @note uses the middlewareV2
     */
    getTransactionHistory(filters?: {
        account?: string;
        ticker?: string;
    }): Promise<HistoricSettlement[]>;
}
//# sourceMappingURL=Portfolios.d.ts.map