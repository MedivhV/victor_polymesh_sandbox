"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroupType = exports.PermissionType = exports.ConditionType = exports.StatType = exports.ClaimType = exports.ScopeType = exports.ConditionTarget = exports.AuthorizationType = exports.SignerType = void 0;
__exportStar(require("./CheckpointSchedule/types"), exports);
__exportStar(require("./CorporateActionBase/types"), exports);
__exportStar(require("./DividendDistribution/types"), exports);
__exportStar(require("./Instruction/types"), exports);
__exportStar(require("./Portfolio/types"), exports);
__exportStar(require("./Asset/types"), exports);
__exportStar(require("./Offering/types"), exports);
__exportStar(require("./TickerReservation/types"), exports);
__exportStar(require("./Venue/types"), exports);
__exportStar(require("./Subsidy/types"), exports);
__exportStar(require("./Account/types"), exports);
__exportStar(require("./Account/MultiSig/types"), exports);
__exportStar(require("./MultiSigProposal/types"), exports);
__exportStar(require("./MetadataEntry/types"), exports);
var SignerType;
(function (SignerType) {
    /* eslint-disable @typescript-eslint/no-shadow */
    SignerType["Identity"] = "Identity";
    SignerType["Account"] = "Account";
    /* eslint-enable @typescript-eslint/no-shadow */
})(SignerType = exports.SignerType || (exports.SignerType = {}));
/**
 * Type of Authorization Request
 */
var AuthorizationType;
(function (AuthorizationType) {
    AuthorizationType["AttestPrimaryKeyRotation"] = "AttestPrimaryKeyRotation";
    AuthorizationType["RotatePrimaryKey"] = "RotatePrimaryKey";
    AuthorizationType["TransferTicker"] = "TransferTicker";
    AuthorizationType["AddMultiSigSigner"] = "AddMultiSigSigner";
    AuthorizationType["TransferAssetOwnership"] = "TransferAssetOwnership";
    AuthorizationType["JoinIdentity"] = "JoinIdentity";
    AuthorizationType["PortfolioCustody"] = "PortfolioCustody";
    AuthorizationType["BecomeAgent"] = "BecomeAgent";
    AuthorizationType["AddRelayerPayingKey"] = "AddRelayerPayingKey";
    AuthorizationType["RotatePrimaryKeyToSecondary"] = "RotatePrimaryKeyToSecondary";
})(AuthorizationType = exports.AuthorizationType || (exports.AuthorizationType = {}));
var ConditionTarget;
(function (ConditionTarget) {
    ConditionTarget["Sender"] = "Sender";
    ConditionTarget["Receiver"] = "Receiver";
    ConditionTarget["Both"] = "Both";
})(ConditionTarget = exports.ConditionTarget || (exports.ConditionTarget = {}));
var ScopeType;
(function (ScopeType) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    ScopeType["Identity"] = "Identity";
    ScopeType["Ticker"] = "Ticker";
    ScopeType["Custom"] = "Custom";
})(ScopeType = exports.ScopeType || (exports.ScopeType = {}));
var ClaimType;
(function (ClaimType) {
    ClaimType["Accredited"] = "Accredited";
    ClaimType["Affiliate"] = "Affiliate";
    ClaimType["BuyLockup"] = "BuyLockup";
    ClaimType["SellLockup"] = "SellLockup";
    ClaimType["CustomerDueDiligence"] = "CustomerDueDiligence";
    ClaimType["KnowYourCustomer"] = "KnowYourCustomer";
    ClaimType["Jurisdiction"] = "Jurisdiction";
    ClaimType["Exempted"] = "Exempted";
    ClaimType["Blocked"] = "Blocked";
    ClaimType["Custom"] = "Custom";
})(ClaimType = exports.ClaimType || (exports.ClaimType = {}));
/**
 * Represents the StatType from the `statistics` module.
 *
 * @note the chain doesn't use "Scoped" types, but they are needed here to discriminate the input instead of having an optional input
 */
var StatType;
(function (StatType) {
    StatType["Count"] = "Count";
    StatType["Balance"] = "Balance";
    /**
     * ScopedCount is an SDK only type, on chain it is `Count` with a claimType option present
     */
    StatType["ScopedCount"] = "ScopedCount";
    /**
     * ScopedPercentage is an SDK only type, on chain it is `Balance` with a claimType option present
     */
    StatType["ScopedBalance"] = "ScopedBalance";
})(StatType = exports.StatType || (exports.StatType = {}));
var ConditionType;
(function (ConditionType) {
    ConditionType["IsPresent"] = "IsPresent";
    ConditionType["IsAbsent"] = "IsAbsent";
    ConditionType["IsAnyOf"] = "IsAnyOf";
    ConditionType["IsNoneOf"] = "IsNoneOf";
    ConditionType["IsExternalAgent"] = "IsExternalAgent";
    ConditionType["IsIdentity"] = "IsIdentity";
})(ConditionType = exports.ConditionType || (exports.ConditionType = {}));
var PermissionType;
(function (PermissionType) {
    PermissionType["Include"] = "Include";
    PermissionType["Exclude"] = "Exclude";
})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));
var PermissionGroupType;
(function (PermissionGroupType) {
    /**
     * all transactions authorized
     */
    PermissionGroupType["Full"] = "Full";
    /**
     * not authorized:
     *   - externalAgents
     */
    PermissionGroupType["ExceptMeta"] = "ExceptMeta";
    /**
     * authorized:
     *   - corporateAction
     *   - corporateBallot
     *   - capitalDistribution
     */
    PermissionGroupType["PolymeshV1Caa"] = "PolymeshV1Caa";
    /**
     * authorized:
     *   - asset.issue
     *   - asset.redeem
     *   - asset.controllerTransfer
     *   - sto (except for sto.invest)
     */
    PermissionGroupType["PolymeshV1Pia"] = "PolymeshV1Pia";
})(PermissionGroupType = exports.PermissionGroupType || (exports.PermissionGroupType = {}));
//# sourceMappingURL=types.js.map