"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftCollection = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Base_1 = require("../Base");
const Settlements_1 = require("../Base/Settlements");
const AssetHolders_1 = require("./AssetHolders");
const internal_1 = require("../../../../internal");
const queries_1 = require("../../../../middleware/queries");
const types_1 = require("../../../../types");
const conversion_1 = require("../../../../utils/conversion");
const internal_2 = require("../../../../utils/internal");
const sumNftIssuance = (numberOfNfts) => {
    let numberIssued = new bignumber_js_1.default(0);
    numberOfNfts.forEach(([, holderEntry]) => {
        const holderAmount = (0, conversion_1.u64ToBigNumber)(holderEntry);
        numberIssued = numberIssued.plus(holderAmount);
    });
    return numberIssued;
};
/**
 * Class used to manage NFT functionality
 */
class NftCollection extends Base_1.BaseAsset {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { ticker } = identifiers;
        this.assetHolders = new AssetHolders_1.AssetHolders(this, context);
        this.settlements = new Settlements_1.NonFungibleSettlements(this, context);
        this.transferOwnership = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.transferAssetOwnership, Object.assign({ ticker }, args)] }, context);
        this.issue = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: args => [internal_1.issueNft, Object.assign({ ticker }, args)],
        }, context);
        this.controllerTransfer = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: args => [internal_1.nftControllerTransfer, Object.assign({ ticker }, args)],
        }, context);
    }
    // eslint-disable-next-line require-jsdoc
    details(callback) {
        const _super = Object.create(null, {
            details: { get: () => super.details }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query }, }, ticker, context, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawNumberNftsPromise = query.nft.numberOfNFTs.entries(rawTicker);
            if (callback) {
                context.assertSupportsSubscription();
                const rawNumberNfts = yield rawNumberNftsPromise;
                const numberIssued = sumNftIssuance(rawNumberNfts);
                // currently `asset.tokens` does not track Nft `totalSupply', we wrap the callback to provide it
                const wrappedCallback = (commonDetails) => __awaiter(this, void 0, void 0, function* () {
                    const nftDetails = Object.assign(Object.assign({}, commonDetails), { totalSupply: numberIssued });
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    callback(nftDetails);
                });
                return _super.details.call(this, wrappedCallback);
            }
            const [rawNumberNfts, commonDetails] = yield Promise.all([
                rawNumberNftsPromise,
                _super.details.call(this),
            ]);
            const numberIssued = sumNftIssuance(rawNumberNfts);
            return Object.assign(Object.assign({}, commonDetails), { totalSupply: numberIssued });
        });
    }
    /**
     * Retrieve the metadata that defines the NFT collection. Every `issue` call for this collection must provide a value for each element returned
     *
     * @note Each NFT **must** have an entry for each value, it **should** comply with the spec.
     * In other words, the SDK only validates the presence of metadata keys, additional validation should be used when issuing
     */
    collectionKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker, context: { polymeshApi: { query }, }, } = this;
            const collectionId = yield this.getCollectionId();
            const rawCollectionId = (0, conversion_1.bigNumberToU64)(collectionId, context);
            const rawKeys = yield query.nft.collectionKeys(rawCollectionId);
            const neededKeys = [...rawKeys].map(value => (0, conversion_1.meshMetadataKeyToMetadataKey)(value, ticker));
            const allMetadata = yield this.metadata.get();
            return Promise.all(neededKeys.map(({ type, id }) => __awaiter(this, void 0, void 0, function* () {
                const neededMetadata = allMetadata.find(entry => entry.type === type && entry.id.eq(id));
                if (!neededMetadata) {
                    throw new internal_1.PolymeshError({
                        code: types_1.ErrorCode.DataUnavailable,
                        message: 'Failed to find metadata details',
                        data: { type, id },
                    });
                }
                const details = yield neededMetadata.details();
                if (type === types_1.MetadataType.Local) {
                    return Object.assign(Object.assign({}, details), { id, type, ticker });
                }
                else {
                    return Object.assign(Object.assign({}, details), { id, type });
                }
            })));
        });
    }
    /**
     * Retrieve the amount of unique investors that hold this Nft
     */
    investorCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query }, }, context, ticker, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const holderEntries = yield query.nft.numberOfNFTs.entries(rawTicker);
            const assetBalances = holderEntries.filter(([, balance]) => !balance.isZero());
            return new bignumber_js_1.default(assetBalances.length);
        });
    }
    /**
     * Get an NFT belonging to this collection
     *
     * @throws if the given NFT does not exist
     */
    getNft(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker } = this;
            const { id } = args;
            const nft = new internal_1.Nft({ ticker, id }, context);
            const exists = yield nft.exists();
            if (!exists) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: 'The NFT does not exist',
                    data: { id },
                });
            }
            return nft;
        });
    }
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the token was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context } = this;
            const { data: { assets: { nodes: [asset], }, }, } = yield context.queryMiddleware((0, queries_1.assetQuery)({
                ticker,
            }));
            return (0, internal_2.optionize)(conversion_1.middlewareEventDetailsToEventIdentifier)(asset === null || asset === void 0 ? void 0 : asset.createdBlock, asset === null || asset === void 0 ? void 0 : asset.eventIdx);
        });
    }
    /**
     * Determine whether this NftCollection exists on chain
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context } = this;
            const rawTokenId = yield context.polymeshApi.query.nft.collectionTicker((0, conversion_1.stringToTicker)(ticker, context));
            return !rawTokenId.isZero();
        });
    }
    /**
     * Returns the collection's on chain numeric ID. Used primarily to access NFT specific storage values
     */
    getCollectionId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context, context: { polymeshApi: { query }, }, } = this;
            if (this._id) {
                return this._id;
            }
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawId = yield query.nft.collectionTicker(rawTicker);
            this._id = (0, conversion_1.u64ToBigNumber)(rawId);
            return this._id;
        });
    }
    /**
     * Retrieve this Collection's transaction history
     *
     * @note uses the middlewareV2
     */
    getTransactionHistory(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker } = this;
            const { size, start } = opts;
            const { data: { assetTransactions: { nodes, totalCount }, }, } = yield context.queryMiddleware((0, queries_1.nftTransactionQuery)({
                assetId: ticker,
            }, size, start));
            const data = nodes.map(({ assetId, nftIds, fromPortfolio, toPortfolio, createdBlock, eventId, eventIdx, extrinsicIdx, fundingRound, instructionId, instructionMemo, }) => (Object.assign({ asset: new NftCollection({ ticker: assetId }, context), nfts: nftIds.map((id) => new internal_1.Nft({ ticker: assetId, id: new bignumber_js_1.default(id) }, context)), event: eventId, to: (0, internal_2.optionize)(conversion_1.middlewarePortfolioToPortfolio)(toPortfolio, context), from: (0, internal_2.optionize)(conversion_1.middlewarePortfolioToPortfolio)(fromPortfolio, context), fundingRound,
                instructionMemo, instructionId: instructionId ? new bignumber_js_1.default(instructionId) : undefined, 
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                extrinsicIndex: new bignumber_js_1.default(extrinsicIdx) }, (0, conversion_1.middlewareEventDetailsToEventIdentifier)(createdBlock, eventIdx))));
            const count = new bignumber_js_1.default(totalCount);
            const next = (0, internal_2.calculateNextKey)(count, data.length, start);
            return {
                data,
                count,
                next,
            };
        });
    }
}
exports.NftCollection = NftCollection;
//# sourceMappingURL=NftCollection.js.map