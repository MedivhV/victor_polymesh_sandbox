"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetHolders = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../../../../internal");
const queries_1 = require("../../../../../middleware/queries");
const internal_2 = require("../../../../../utils/internal");
/**
 * Handles all NFT Holders related functionality
 */
class AssetHolders extends internal_1.Namespace {
    /**
     * Retrieve all the NFT Holders with their holdings
     *
     * @note uses the middlewareV2
     */
    get(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, parent: { ticker }, } = this;
            const { size, start } = opts;
            const { data: { nftHolders: { totalCount, nodes }, }, } = yield context.queryMiddleware((0, queries_1.nftCollectionHolders)(ticker, size, start));
            const data = nodes.map(({ nftIds, identityId }) => ({
                identity: new internal_1.Identity({ did: identityId }, context),
                nfts: nftIds.map((id) => new internal_1.Nft({ id: new bignumber_js_1.default(id), ticker }, context)),
            }));
            const next = (0, internal_2.calculateNextKey)(new bignumber_js_1.default(totalCount), nodes.length, start);
            return {
                data,
                next,
            };
        });
    }
}
exports.AssetHolders = AssetHolders;
//# sourceMappingURL=index.js.map