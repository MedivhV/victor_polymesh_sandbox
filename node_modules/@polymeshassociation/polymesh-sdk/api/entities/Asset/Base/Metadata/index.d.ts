import BigNumber from 'bignumber.js';
import { BaseAsset, Context, MetadataEntry, Namespace } from "../../../../../internal";
import { MetadataType, MetadataWithValue, ProcedureMethod, RegisterMetadataParams } from "../../../../../types";
/**
 * Handles all Asset Metadata related functionality
 */
export declare class Metadata extends Namespace<BaseAsset> {
    /**
     * @hidden
     */
    constructor(parent: BaseAsset, context: Context);
    /**
     * Register a metadata for this Asset and optionally set its value.
     * The metadata value can be set by passing `value` parameter and specifying other optional `details` about the value
     *
     * @note This registers a metadata of type `Local`
     */
    register: ProcedureMethod<RegisterMetadataParams, MetadataEntry>;
    /**
     * Retrieve all (global + local) the MetadataEntry for this Asset
     *
     * @note this returns all available metadata entries for this Asset, with or without any value being associated with the metadata
     */
    get(): Promise<MetadataEntry[]>;
    /**
     * Retrieve a single MetadataEntry by its ID and type
     *
     * @throws if there is no MetadataEntry with the passed ID and specified type
     */
    getOne(args: {
        type: MetadataType;
        id: BigNumber;
    }): Promise<MetadataEntry>;
    /**
     * Gets the next local metadata ID for the Asset
     *
     * @hidden
     */
    getNextLocalId(): Promise<BigNumber>;
    /**
     * Retrieve all (local + global) the MetadataEntry details whose value is set for this Asset
     */
    getDetails(): Promise<MetadataWithValue[]>;
}
//# sourceMappingURL=index.d.ts.map