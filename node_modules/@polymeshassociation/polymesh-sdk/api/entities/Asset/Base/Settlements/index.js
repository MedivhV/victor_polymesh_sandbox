"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonFungibleSettlements = exports.FungibleSettlements = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const toggleTickerPreApproval_1 = require("../../../../procedures/toggleTickerPreApproval");
const utils_1 = require("../../../../procedures/utils");
const internal_1 = require("../../../../../internal");
const types_1 = require("../../../../../types");
const utils_2 = require("../../../../../utils");
const conversion_1 = require("../../../../../utils/conversion");
const internal_2 = require("../../../../../utils/internal");
/**
 * @hidden
 */
class BaseSettlements extends internal_1.Namespace {
    /**
     * @hidden
     */
    constructor(parent, context) {
        super(parent, context);
        this.preApprove = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: () => [
                toggleTickerPreApproval_1.toggleTickerPreApproval,
                { ticker: parent.ticker, preApprove: true },
            ],
            voidArgs: true,
        }, context);
        this.removePreApproval = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: () => [
                toggleTickerPreApproval_1.toggleTickerPreApproval,
                { ticker: parent.ticker, preApprove: false },
            ],
            voidArgs: true,
        }, context);
    }
    /**
     * Check whether it is possible to create a settlement instruction to transfer a certain amount of this asset between two Portfolios. Returns a breakdown of
     *   the transaction containing general errors (such as insufficient balance or invalid receiver), any broken transfer restrictions, and any compliance
     *   failures
     *
     * @note this takes locked tokens into account. For example, if portfolio A has 1000 tokens and this function is called to check if 700 of them can be
     *   transferred to portfolio B (assuming everything else checks out) the result will be success. If an instruction is created and authorized to transfer those 700 tokens,
     *   they would become locked. From that point, further calls to this function would return failed results because of the funds being locked, even though they haven't been
     *   transferred yet
     *
     * @param args.from - sender Portfolio (optional, defaults to the signing Identity's Default Portfolio)
     * @param args.to - receiver Portfolio
     * @param args.amount - amount of fungible tokens to transfer
     * @param args.nfts - the NFTs to transfer
     *
     */
    canTransferBase(args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { parent: { ticker }, context: { polymeshApi: { call }, }, context, parent, } = this;
            const { assetApi, nftApi } = call;
            const { to } = args;
            const from = (_a = args.from) !== null && _a !== void 0 ? _a : (yield context.getSigningIdentity());
            let isDivisible = false;
            let amount = new bignumber_js_1.default(0);
            const fromPortfolioId = (0, conversion_1.portfolioLikeToPortfolioId)(from);
            const toPortfolioId = (0, conversion_1.portfolioLikeToPortfolioId)(to);
            const fromPortfolio = (0, conversion_1.portfolioIdToPortfolio)(fromPortfolioId, context);
            const toPortfolio = (0, conversion_1.portfolioIdToPortfolio)(toPortfolioId, context);
            const [, , fromCustodian, toCustodian] = yield Promise.all([
                (0, utils_1.assertPortfolioExists)(fromPortfolioId, context),
                (0, utils_1.assertPortfolioExists)(toPortfolioId, context),
                fromPortfolio.getCustodian(),
                toPortfolio.getCustodian(),
            ]);
            if ((0, utils_2.isFungibleAsset)(parent)) {
                ({ isDivisible } = yield parent.details());
            }
            const rawFromPortfolio = (0, conversion_1.portfolioIdToMeshPortfolioId)(fromPortfolioId, context);
            const rawToPortfolio = (0, conversion_1.portfolioIdToMeshPortfolioId)(toPortfolioId, context);
            let granularResult;
            let nftResult;
            if ('amount' in args) {
                amount = args.amount;
                ({ isDivisible } = yield parent.details());
                granularResult = yield assetApi.canTransferGranular((0, conversion_1.stringToIdentityId)(fromCustodian.did, context), rawFromPortfolio, (0, conversion_1.stringToIdentityId)(toCustodian.did, context), rawToPortfolio, (0, conversion_1.stringToTicker)(ticker, context), (0, conversion_1.bigNumberToBalance)(amount, context, isDivisible));
            }
            else {
                const rawNfts = (0, conversion_1.nftToMeshNft)(ticker, args.nfts, context);
                [granularResult, nftResult] = yield Promise.all([
                    assetApi.canTransferGranular((0, conversion_1.stringToIdentityId)(fromCustodian.did, context), rawFromPortfolio, (0, conversion_1.stringToIdentityId)(toCustodian.did, context), rawToPortfolio, (0, conversion_1.stringToTicker)(ticker, context), (0, conversion_1.bigNumberToBalance)(amount, context, isDivisible)),
                    nftApi.validateNftTransfer(rawFromPortfolio, rawToPortfolio, rawNfts),
                ]);
            }
            if (!granularResult.isOk) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.LimitExceeded,
                    message: 'RPC result from "asset.canTransferGranular" was not OK. Execution meter was likely exceeded',
                });
            }
            return (0, conversion_1.granularCanTransferResultToTransferBreakdown)(granularResult.asOk, nftResult, context);
        });
    }
}
/**
 * Handles all Asset Settlements related functionality
 */
class FungibleSettlements extends BaseSettlements {
    /**
     * Check whether it is possible to create a settlement instruction to transfer a certain amount of this asset between two Portfolios. Returns a breakdown of
     *   the transaction containing general errors (such as insufficient balance or invalid receiver), any broken transfer restrictions, and any compliance
     *   failures
     *
     * @note this takes locked tokens into account. For example, if portfolio A has 1000 tokens and this function is called to check if 700 of them can be
     *   transferred to portfolio B (assuming everything else checks out) the result will be success. If an instruction is created and authorized to transfer those 700 tokens,
     *   they would become locked. From that point, further calls to this function would return failed results because of the funds being locked, even though they haven't been
     *   transferred yet
     *
     * @param args.from - sender Portfolio (optional, defaults to the signing Identity's Default Portfolio)
     * @param args.to - receiver Portfolio
     * @param args.amount - amount of tokens to transfer
     *
     */
    canTransfer(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canTransferBase(args);
        });
    }
}
exports.FungibleSettlements = FungibleSettlements;
/**
 * Handles all Asset Settlements related functionality
 */
class NonFungibleSettlements extends BaseSettlements {
    /**
     * Check whether it is possible to create a settlement instruction to transfer an NFT between two Portfolios. Returns a breakdown of
     *   the transaction containing general errors (such as insufficient balance or invalid receiver), any broken transfer restrictions, and any compliance
     *   failures
     *
     * @note this takes locked tokens into account. For example, if portfolio A has NFTs 1, 2 and 3 of a collection and this function is called to check if 1 of them can be
     *   transferred to portfolio B (assuming everything else checks out) the result will be success. If an instruction is created and authorized to transfer that token,
     *   they would become locked. From that point, further calls to this function would return failed results because of the funds being locked, even though it hasn't been
     *   transferred yet
     *
     * @param args.from - sender Portfolio (optional, defaults to the signing Identity's Default Portfolio)
     * @param args.to - receiver Portfolio
     * @param args.nfts - the NFTs to transfer
     *
     */
    canTransfer(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canTransferBase(args);
        });
    }
}
exports.NonFungibleSettlements = NonFungibleSettlements;
//# sourceMappingURL=index.js.map