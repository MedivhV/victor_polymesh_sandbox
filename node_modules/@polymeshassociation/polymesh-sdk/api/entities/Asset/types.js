"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferError = exports.TransferStatus = exports.SecurityIdentifierType = exports.KnownNftType = exports.KnownAssetType = void 0;
var KnownAssetType;
(function (KnownAssetType) {
    KnownAssetType["EquityCommon"] = "EquityCommon";
    KnownAssetType["EquityPreferred"] = "EquityPreferred";
    KnownAssetType["Commodity"] = "Commodity";
    KnownAssetType["FixedIncome"] = "FixedIncome";
    KnownAssetType["Reit"] = "Reit";
    KnownAssetType["Fund"] = "Fund";
    KnownAssetType["RevenueShareAgreement"] = "RevenueShareAgreement";
    KnownAssetType["StructuredProduct"] = "StructuredProduct";
    KnownAssetType["Derivative"] = "Derivative";
    KnownAssetType["StableCoin"] = "StableCoin";
})(KnownAssetType = exports.KnownAssetType || (exports.KnownAssetType = {}));
var KnownNftType;
(function (KnownNftType) {
    KnownNftType["Derivative"] = "Derivative";
    KnownNftType["FixedIncome"] = "FixedIncome";
    KnownNftType["Invoice"] = "Invoice";
})(KnownNftType = exports.KnownNftType || (exports.KnownNftType = {}));
var SecurityIdentifierType;
(function (SecurityIdentifierType) {
    SecurityIdentifierType["Isin"] = "Isin";
    SecurityIdentifierType["Cusip"] = "Cusip";
    SecurityIdentifierType["Cins"] = "Cins";
    SecurityIdentifierType["Lei"] = "Lei";
    SecurityIdentifierType["Figi"] = "Figi";
})(SecurityIdentifierType = exports.SecurityIdentifierType || (exports.SecurityIdentifierType = {}));
__exportStar(require("./Fungible/Checkpoints/types"), exports);
__exportStar(require("./Fungible/CorporateActions/types"), exports);
/**
 * ERC1400 compliant transfer status
 */
var TransferStatus;
(function (TransferStatus) {
    TransferStatus["Failure"] = "Failure";
    TransferStatus["Success"] = "Success";
    TransferStatus["InsufficientBalance"] = "InsufficientBalance";
    TransferStatus["InsufficientAllowance"] = "InsufficientAllowance";
    TransferStatus["TransfersHalted"] = "TransfersHalted";
    TransferStatus["FundsLocked"] = "FundsLocked";
    TransferStatus["InvalidSenderAddress"] = "InvalidSenderAddress";
    TransferStatus["InvalidReceiverAddress"] = "InvalidReceiverAddress";
    TransferStatus["InvalidOperator"] = "InvalidOperator";
    TransferStatus["InvalidSenderIdentity"] = "InvalidSenderIdentity";
    TransferStatus["InvalidReceiverIdentity"] = "InvalidReceiverIdentity";
    TransferStatus["ComplianceFailure"] = "ComplianceFailure";
    TransferStatus["SmartExtensionFailure"] = "SmartExtensionFailure";
    TransferStatus["InvalidGranularity"] = "InvalidGranularity";
    TransferStatus["VolumeLimitReached"] = "VolumeLimitReached";
    TransferStatus["BlockedTransaction"] = "BlockedTransaction";
    TransferStatus["FundsLimitReached"] = "FundsLimitReached";
    TransferStatus["PortfolioFailure"] = "PortfolioFailure";
    TransferStatus["CustodianError"] = "CustodianError";
    TransferStatus["ScopeClaimMissing"] = "ScopeClaimMissing";
    TransferStatus["TransferRestrictionFailure"] = "TransferRestrictionFailure";
})(TransferStatus = exports.TransferStatus || (exports.TransferStatus = {}));
/**
 * Akin to TransferStatus, these are a bit more granular and specific. Every TransferError translates to
 *   a {@link TransferStatus}, but two or more TransferErrors can represent the same TransferStatus, and
 *   not all Transfer Statuses are represented by a TransferError
 */
var TransferError;
(function (TransferError) {
    /**
     * translates to TransferStatus.InvalidGranularity
     *
     * occurs if attempting to transfer decimal amounts of a non-divisible token
     */
    TransferError["InvalidGranularity"] = "InvalidGranularity";
    /**
     * translates to TransferStatus.InvalidReceiverIdentity
     *
     * occurs if the origin and destination Identities are the same
     */
    TransferError["SelfTransfer"] = "SelfTransfer";
    /**
     * translates to TransferStatus.InvalidReceiverIdentity
     *
     * occurs if the receiver Identity doesn't have a valid CDD claim
     */
    TransferError["InvalidReceiverCdd"] = "InvalidReceiverCdd";
    /**
     * translates to TransferStatus.InvalidSenderIdentity
     *
     * occurs if the receiver Identity doesn't have a valid CDD claim
     */
    TransferError["InvalidSenderCdd"] = "InvalidSenderCdd";
    /**
     * translates to TransferStatus.ScopeClaimMissing
     *
     * occurs if one of the participants doesn't have a valid Investor Uniqueness Claim for
     *   the Asset
     */
    TransferError["ScopeClaimMissing"] = "ScopeClaimMissing";
    /**
     * translates to TransferStatus.InsufficientBalance
     *
     * occurs if the sender Identity does not have enough balance to cover the amount
     */
    TransferError["InsufficientBalance"] = "InsufficientBalance";
    /**
     * translates to TransferStatus.TransfersHalted
     *
     * occurs if the Asset's transfers are frozen
     */
    TransferError["TransfersFrozen"] = "TransfersFrozen";
    /**
     * translates to TransferStatus.PortfolioFailure
     *
     * occurs if the sender Portfolio doesn't exist
     */
    TransferError["InvalidSenderPortfolio"] = "InvalidSenderPortfolio";
    /**
     * translates to TransferStatus.PortfolioFailure
     *
     * occurs if the receiver Portfolio doesn't exist
     */
    TransferError["InvalidReceiverPortfolio"] = "InvalidReceiverPortfolio";
    /**
     * translates to TransferStatus.PortfolioFailure
     *
     * occurs if the sender Portfolio does not have enough balance to cover the amount
     */
    TransferError["InsufficientPortfolioBalance"] = "InsufficientPortfolioBalance";
    /**
     * translates to TransferStatus.ComplianceFailure
     *
     * occurs if some compliance rule would prevent the transfer
     */
    TransferError["ComplianceFailure"] = "ComplianceFailure";
})(TransferError = exports.TransferError || (exports.TransferError = {}));
//# sourceMappingURL=types.js.map