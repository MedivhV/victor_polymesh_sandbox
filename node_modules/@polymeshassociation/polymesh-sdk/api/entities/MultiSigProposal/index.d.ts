import { BigNumber } from 'bignumber.js';
import { Account, Context, Entity, MultiSig } from "../../../internal";
import { EventIdentifier, MultiSigProposalDetails, MultiSigProposalVote, NoArgsProcedureMethod } from "../../../types";
interface UniqueIdentifiers {
    multiSigAddress: string;
    id: BigNumber;
}
export interface HumanReadable {
    multiSigAddress: string;
    id: string;
}
/**
 * A proposal for a MultiSig transaction. This is a wrapper around an extrinsic that will be executed when the amount of approvals reaches the signature threshold set on the MultiSig Account
 */
export declare class MultiSigProposal extends Entity<UniqueIdentifiers, HumanReadable> {
    multiSig: MultiSig;
    id: BigNumber;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Approve this MultiSig proposal
     */
    approve: NoArgsProcedureMethod<void>;
    /**
     * Reject this MultiSig proposal
     */
    reject: NoArgsProcedureMethod<void>;
    /**
     * Fetches the details of the Proposal. This includes the amount of approvals and rejections, the expiry, and details of the wrapped extrinsic
     */
    details(): Promise<MultiSigProposalDetails>;
    /**
     * Determines whether this Proposal exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Returns a human readable representation
     */
    toHuman(): HumanReadable;
    /**
     * Fetches the individual votes for this MultiSig proposal and their identifier data (block number, date and event index) of the event that was emitted when this MultiSig Proposal Vote was casted
     *
     * @note uses the middlewareV2
     */
    votes(): Promise<MultiSigProposalVote[]>;
    /**
     * @hidden
     *
     * Queries the SQ to get MultiSig Proposal details
     */
    private getProposalDetails;
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when this MultiSig Proposal was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt(): Promise<EventIdentifier | null>;
    /**
     * Retrieve the account which created this MultiSig Proposal
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    creator(): Promise<Account | null>;
}
export {};
//# sourceMappingURL=index.d.ts.map