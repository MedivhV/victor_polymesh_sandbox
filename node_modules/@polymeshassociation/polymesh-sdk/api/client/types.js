"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorCode = void 0;
/**
 * Specifies possible types of errors in the SDK
 */
var ErrorCode;
(function (ErrorCode) {
    /**
     * transaction removed from the tx pool
     */
    ErrorCode["TransactionAborted"] = "TransactionAborted";
    /**
     * user rejected the transaction in their wallet
     */
    ErrorCode["TransactionRejectedByUser"] = "TransactionRejectedByUser";
    /**
     * transaction failed due to an on-chain error. This is a business logic error,
     *   and it should be caught by the SDK before being sent to the chain.
     *   Please report it to the Polymesh team
     */
    ErrorCode["TransactionReverted"] = "TransactionReverted";
    /**
     * error that should cause termination of the calling application
     */
    ErrorCode["FatalError"] = "FatalError";
    /**
     * user input error. This means that one or more inputs passed by the user
     *   do not conform to expected value ranges or types
     */
    ErrorCode["ValidationError"] = "ValidationError";
    /**
     * user does not have the required roles/permissions to perform an operation
     */
    ErrorCode["NotAuthorized"] = "NotAuthorized";
    /**
     * errors encountered when interacting with the historic data middleware (GQL server)
     */
    ErrorCode["MiddlewareError"] = "MiddlewareError";
    /**
     * the data that is being fetched does not exist on-chain, or relies on non-existent data. There are
     *   some cases where the data did exist at some point, but has been deleted to save storage space
     */
    ErrorCode["DataUnavailable"] = "DataUnavailable";
    /**
     * the data that is being written to the chain is the same data that is already in place. This would result
     *   in a redundant/useless transaction being executed
     */
    ErrorCode["NoDataChange"] = "NoDataChange";
    /**
     * the data that is being written to the chain would result in some limit being exceeded. For example, adding a transfer
     *   restriction when the maximum possible amount has already been added
     */
    ErrorCode["LimitExceeded"] = "LimitExceeded";
    /**
     * one or more base prerequisites for a transaction to be successful haven't been met. For example, reserving a ticker requires
     *   said ticker to not be already reserved. Attempting to reserve a ticker without that prerequisite being met would result in this
     *   type of error. Attempting to create an entity that already exists would also fall into this category,
     *   if the entity in question is supposed to be unique
     */
    ErrorCode["UnmetPrerequisite"] = "UnmetPrerequisite";
    /**
     * this type of error is thrown when attempting to delete/modify an entity which has other entities depending on it. For example, deleting
     *   a Portfolio that still holds assets, or removing a Checkpoint Schedule that is being referenced by a Corporate Action
     */
    ErrorCode["EntityInUse"] = "EntityInUse";
    /**
     * one or more parties involved in the transaction do not have enough balance to perform it
     */
    ErrorCode["InsufficientBalance"] = "InsufficientBalance";
    /**
     * errors that are the result of something unforeseen.
     *   These should generally be reported to the Polymesh team
     */
    ErrorCode["UnexpectedError"] = "UnexpectedError";
    /**
     * general purpose errors that don't fit well into the other categories
     */
    ErrorCode["General"] = "General";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
//# sourceMappingURL=types.js.map