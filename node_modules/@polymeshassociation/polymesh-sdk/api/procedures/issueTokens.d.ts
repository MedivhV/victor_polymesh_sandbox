import { FungibleAsset, Procedure } from "../../internal";
import { IssueTokensParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
export declare type Params = IssueTokensParams & {
    ticker: string;
};
export interface Storage {
    asset: FungibleAsset;
}
/**
 * @hidden
 */
export declare function prepareIssueTokens(this: Procedure<Params, FungibleAsset, Storage>, args: Params): Promise<TransactionSpec<FungibleAsset, ExtrinsicParams<'asset', 'issue'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, FungibleAsset, Storage>): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, FungibleAsset, Storage>, { ticker }: Params): Storage;
/**
 * @hidden
 */
export declare const issueTokens: () => Procedure<Params, FungibleAsset, Storage>;
//# sourceMappingURL=issueTokens.d.ts.map