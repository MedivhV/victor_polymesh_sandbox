"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateMultiSigProposal = exports.prepareMultiSigProposalEvaluation = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareMultiSigProposalEvaluation(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { multiSig }, query: { multiSig: { votes }, }, }, }, context, } = this;
        const { proposal: { id, multiSig: { address: multiSigAddress }, }, proposal, action, } = args;
        const rawMultiSigAddress = (0, conversion_1.stringToAccountId)(multiSigAddress, context);
        const rawProposalId = (0, conversion_1.bigNumberToU64)(id, context);
        const signingAccount = context.getSigningAccount();
        const rawSigner = (0, conversion_1.signerToSignatory)(signingAccount, context);
        const [creator, { signers: multiSigSigners }, { status }, hasVoted] = yield Promise.all([
            proposal.multiSig.getCreator(),
            proposal.multiSig.details(),
            proposal.details(),
            votes([rawMultiSigAddress, rawProposalId], rawSigner),
        ]);
        if (!multiSigSigners.some(multiSigSigner => (0, conversion_1.signerToSignerValue)(multiSigSigner).value === signingAccount.address)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The signing Account is not a signer of the MultiSig',
            });
        }
        if ((0, conversion_1.boolToBoolean)(hasVoted)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The signing Account has already voted for this MultiSig Proposal',
            });
        }
        let errorCode = types_1.ErrorCode.UnmetPrerequisite;
        let message;
        switch (status) {
            case types_1.ProposalStatus.Invalid:
                errorCode = types_1.ErrorCode.DataUnavailable;
                message = 'The MultiSig Proposal does not exist';
                break;
            case types_1.ProposalStatus.Rejected:
                message = 'The MultiSig Proposal has already been rejected';
                break;
            case types_1.ProposalStatus.Successful:
            case types_1.ProposalStatus.Failed:
                message = 'The MultiSig Proposal has already been executed';
                break;
            case types_1.ProposalStatus.Expired:
                message = 'The MultiSig Proposal has expired';
                break;
        }
        if (message) {
            throw new internal_1.PolymeshError({
                code: errorCode,
                message,
            });
        }
        let transaction;
        if (action === types_1.MultiSigProposalAction.Approve) {
            transaction = multiSig.approveAsKey;
        }
        else {
            transaction = multiSig.rejectAsKey;
        }
        return {
            transaction,
            paidForBy: creator,
            args: [rawMultiSigAddress, rawProposalId],
            resolver: undefined,
        };
    });
}
exports.prepareMultiSigProposalEvaluation = prepareMultiSigProposalEvaluation;
/**
 * @hidden
 */
const evaluateMultiSigProposal = () => new internal_1.Procedure(prepareMultiSigProposalEvaluation, {
    signerPermissions: true,
});
exports.evaluateMultiSigProposal = evaluateMultiSigProposal;
//# sourceMappingURL=evaluateMultiSigProposal.js.map