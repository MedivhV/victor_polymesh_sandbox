"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rotatePrimaryKeyToSecondary = exports.prepareRotatePrimaryKeyToSecondary = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareRotatePrimaryKeyToSecondary(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity: { addAuthorization }, }, }, }, context, } = this;
        const { permissions, targetAccount, expiry } = args;
        const issuerIdentity = yield context.getSigningIdentity();
        const target = (0, internal_2.asAccount)(targetAccount, context);
        const [authorizationRequests, targetIdentity, primaryAccount] = yield Promise.all([
            issuerIdentity.authorizations.getSent(),
            target.getIdentity(),
            issuerIdentity.getPrimaryAccount(),
        ]);
        const pendingAuthorization = authorizationRequests.data.find(authorizationRequest => {
            const { target: targetSigner, data: { type }, } = authorizationRequest;
            return ((0, conversion_1.signerToString)(targetSigner) === targetAccount &&
                !authorizationRequest.isExpired() &&
                type === types_1.AuthorizationType.RotatePrimaryKeyToSecondary);
        });
        if (pendingAuthorization) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The target Account already has a pending invitation to become the primary key of the given Identity',
                data: {
                    pendingAuthorization,
                },
            });
        }
        if (targetIdentity && !targetIdentity.isEqual(issuerIdentity)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: 'The target Account is assigned to another Identity',
                data: {
                    targetIdentity,
                },
            });
        }
        if (target.isEqual(primaryAccount.account)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The target Account is already the primary key of the given Identity',
                data: {
                    target: targetAccount,
                },
            });
        }
        const rawSignatory = (0, conversion_1.signerToSignatory)(target, context);
        const authorization = {
            type: types_1.AuthorizationType.RotatePrimaryKeyToSecondary,
            value: (0, conversion_1.permissionsLikeToPermissions)(permissions, context),
        };
        const rawAuthorizationData = (0, conversion_1.authorizationToAuthorizationData)(authorization, context);
        const rawExpiry = (0, conversion_1.expiryToMoment)(expiry, context);
        return {
            transaction: addAuthorization,
            args: [rawSignatory, rawAuthorizationData, rawExpiry],
            resolver: (0, utils_1.createAuthorizationResolver)(authorization, issuerIdentity, target, expiry !== null && expiry !== void 0 ? expiry : null, context),
        };
    });
}
exports.prepareRotatePrimaryKeyToSecondary = prepareRotatePrimaryKeyToSecondary;
/**
 * @hidden
 */
const rotatePrimaryKeyToSecondary = () => new internal_1.Procedure(prepareRotatePrimaryKeyToSecondary, {
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [types_1.TxTags.identity.AddAuthorization],
    },
});
exports.rotatePrimaryKeyToSecondary = rotatePrimaryKeyToSecondary;
//# sourceMappingURL=rotatePrimaryKeyToSecondary.js.map