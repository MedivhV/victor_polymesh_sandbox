import { ISubmittableResult } from '@polkadot/types/types';
import { Nft } from "../entities/Asset/NonFungible/Nft";
import { Context, NftCollection, Procedure } from "../../internal";
import { IssueNftParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
export declare type Params = IssueNftParams & {
    ticker: string;
};
export interface Storage {
    collection: NftCollection;
}
/**
 * @hidden
 */
export declare const issueNftResolver: (context: Context) => (receipt: ISubmittableResult) => Nft;
/**
 * @hidden
 */
export declare function prepareIssueNft(this: Procedure<Params, Nft, Storage>, args: Params): Promise<TransactionSpec<Nft, ExtrinsicParams<'nft', 'issueNft'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Nft, Storage>): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, Nft, Storage>, { ticker }: Params): Storage;
/**
 * @hidden
 */
export declare const issueNft: () => Procedure<Params, Nft, Storage>;
//# sourceMappingURL=issueNft.d.ts.map