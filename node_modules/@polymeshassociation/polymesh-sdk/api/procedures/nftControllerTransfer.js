"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nftControllerTransfer = exports.prepareStorage = exports.getAuthorization = exports.prepareNftControllerTransfer = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareNftControllerTransfer(args) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, storage: { did, destinationPortfolio }, context, } = this;
        const { ticker, originPortfolio, nfts: givenNfts } = args;
        const nftIds = givenNfts.map(nft => (0, internal_2.asNftId)(nft));
        const collection = new internal_1.NftCollection({ ticker }, context);
        const originPortfolioId = (0, conversion_1.portfolioLikeToPortfolioId)(originPortfolio);
        if (did === originPortfolioId.did) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Controller transfers to self are not allowed',
            });
        }
        if (did !== destinationPortfolio.owner.did) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: "Controller transfer must send to one of the signer's portfolios",
            });
        }
        const fromPortfolio = (0, conversion_1.portfolioIdToPortfolio)(originPortfolioId, context);
        const [heldCollection] = yield fromPortfolio.getCollections({
            collections: [collection],
        });
        const free = (_a = heldCollection === null || heldCollection === void 0 ? void 0 : heldCollection.free) !== null && _a !== void 0 ? _a : [];
        const unavailableNfts = nftIds.filter(nftId => !free.some(freeNft => freeNft.id.eq(nftId)));
        if (unavailableNfts.length) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.InsufficientBalance,
                message: 'The origin Portfolio does not have all of the requested NFTs',
                data: { unavailable: unavailableNfts.map(id => id.toString()) },
            });
        }
        const rawNfts = (0, conversion_1.nftToMeshNft)(ticker, nftIds, context);
        return {
            transaction: tx.nft.controllerTransfer,
            args: [
                (0, conversion_1.stringToTicker)(ticker, context),
                rawNfts,
                (0, conversion_1.portfolioIdToMeshPortfolioId)(originPortfolioId, context),
                (0, conversion_1.portfolioToPortfolioKind)(destinationPortfolio, context),
            ],
            resolver: undefined,
        };
    });
}
exports.prepareNftControllerTransfer = prepareNftControllerTransfer;
/**
 * @hidden
 */
function getAuthorization({ ticker }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { destinationPortfolio }, } = this;
        const asset = new internal_1.NftCollection({ ticker }, context);
        const portfolioId = (0, conversion_1.portfolioToPortfolioId)(destinationPortfolio);
        return {
            roles: [{ type: types_1.RoleType.PortfolioCustodian, portfolioId }],
            permissions: {
                assets: [asset],
                transactions: [types_1.TxTags.nft.ControllerTransfer],
                portfolios: [destinationPortfolio],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ destinationPortfolio: givenPortfolio }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const { did } = yield context.getSigningIdentity();
        const destinationPortfolioId = givenPortfolio
            ? (0, conversion_1.portfolioLikeToPortfolioId)(givenPortfolio)
            : (0, conversion_1.portfolioLikeToPortfolioId)({ identity: did, id: new bignumber_js_1.default(0) });
        const destinationPortfolio = (0, conversion_1.portfolioIdToPortfolio)(destinationPortfolioId, context);
        return {
            did,
            destinationPortfolio,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const nftControllerTransfer = () => new internal_1.Procedure(prepareNftControllerTransfer, getAuthorization, prepareStorage);
exports.nftControllerTransfer = nftControllerTransfer;
//# sourceMappingURL=nftControllerTransfer.js.map