"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeLocalMetadata = exports.getAuthorization = exports.prepareRemoveLocalMetadata = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareRemoveLocalMetadata(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx, query: { nft: { collectionKeys, collectionTicker }, }, }, }, context, } = this;
        const { metadataEntry: { id, type, asset: { ticker }, }, metadataEntry, } = params;
        if (type === types_1.MetadataType.Global) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Global Metadata keys cannot be deleted',
            });
        }
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const rawKeyId = (0, conversion_1.bigNumberToU64)(id, context);
        const [collectionKey, { canModify, reason }] = yield Promise.all([
            collectionTicker(rawTicker),
            metadataEntry.isModifiable(),
        ]);
        if (!collectionKey.isZero()) {
            const rawKeys = yield collectionKeys(collectionKey);
            const isRequired = [...rawKeys].some(value => (0, conversion_1.meshMetadataKeyToMetadataKey)(value, ticker).id.eq(id));
            if (isRequired) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.UnmetPrerequisite,
                    message: 'Cannot delete a mandatory NFT Collection Key',
                });
            }
        }
        if (!canModify) {
            throw reason;
        }
        return {
            transaction: tx.asset.removeLocalMetadataKey,
            args: [rawTicker, rawKeyId],
            resolver: undefined,
        };
    });
}
exports.prepareRemoveLocalMetadata = prepareRemoveLocalMetadata;
/**
 * @hidden
 */
function getAuthorization(params) {
    const { context } = this;
    const { metadataEntry: { asset: { ticker }, }, } = params;
    return {
        permissions: {
            transactions: [types_1.TxTags.asset.RemoveLocalMetadataKey],
            assets: [new internal_1.FungibleAsset({ ticker }, context)],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const removeLocalMetadata = () => new internal_1.Procedure(prepareRemoveLocalMetadata, getAuthorization);
exports.removeLocalMetadata = removeLocalMetadata;
//# sourceMappingURL=removeLocalMetadata.js.map