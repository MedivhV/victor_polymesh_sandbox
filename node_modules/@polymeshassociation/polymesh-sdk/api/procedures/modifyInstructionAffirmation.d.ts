import BigNumber from 'bignumber.js';
import { Instruction, Procedure } from "../../internal";
import { DefaultPortfolio, Identity, ModifyInstructionAffirmationParams, NumberedPortfolio, PortfolioLike } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
export interface Storage {
    portfolios: (DefaultPortfolio | NumberedPortfolio)[];
    portfolioParams: PortfolioLike[];
    senderLegAmount: BigNumber;
    totalLegAmount: BigNumber;
    signer: Identity;
}
/**
 * @hidden
 */
export declare function prepareModifyInstructionAffirmation(this: Procedure<ModifyInstructionAffirmationParams, Instruction, Storage>, args: ModifyInstructionAffirmationParams): Promise<TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'affirmInstructionWithCount'>> | TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'withdrawAffirmationWithCount'>> | TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'rejectInstructionWithCount'>> | TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'affirmInstructionAsMediator'>> | TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'withdrawAffirmationAsMediator'>> | TransactionSpec<Instruction, ExtrinsicParams<'settlementTx', 'rejectInstructionAsMediator'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<ModifyInstructionAffirmationParams, Instruction, Storage>, { operation }: ModifyInstructionAffirmationParams): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<ModifyInstructionAffirmationParams, Instruction, Storage>, params: ModifyInstructionAffirmationParams): Promise<Storage>;
/**
 * @hidden
 */
export declare const modifyInstructionAffirmation: () => Procedure<ModifyInstructionAffirmationParams, Instruction, Storage>;
//# sourceMappingURL=modifyInstructionAffirmation.d.ts.map