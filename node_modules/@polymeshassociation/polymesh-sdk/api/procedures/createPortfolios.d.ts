import { ISubmittableResult } from '@polkadot/types/types';
import { Context, NumberedPortfolio, Procedure } from "../../internal";
import { BatchTransactionSpec, ProcedureAuthorization } from "../../types/internal";
declare type PortfolioParams = {
    name: string;
    ownerDid?: string;
};
/**
 * @hidden
 */
export interface Params {
    portfolios: PortfolioParams[];
}
/**
 * @hidden
 */
export declare const createPortfoliosResolver: (context: Context) => (receipt: ISubmittableResult) => NumberedPortfolio[];
/**
 * @hidden
 */
export declare function prepareCreatePortfolios(this: Procedure<Params, NumberedPortfolio[]>, args: Params): Promise<BatchTransactionSpec<NumberedPortfolio[], unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, NumberedPortfolio[]>, { portfolios }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const createPortfolios: () => Procedure<Params, NumberedPortfolio[]>;
export {};
//# sourceMappingURL=createPortfolios.d.ts.map