"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggleTickerPreApproval = exports.getAuthorization = exports.prepareToggleTickerPreApproval = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareToggleTickerPreApproval(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { ticker, preApprove } = args;
        const identity = yield context.getSigningIdentity();
        const isPreApproved = yield identity.isAssetPreApproved(ticker);
        if (isPreApproved === preApprove) {
            const message = isPreApproved
                ? 'The signing identity has already pre-approved the ticker'
                : 'The signing identity has not pre-approved the asset';
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message,
                data: { identity: identity.did, ticker },
            });
        }
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const transaction = preApprove ? tx.asset.preApproveTicker : tx.asset.removeTickerPreApproval;
        return {
            transaction,
            args: [rawTicker],
            resolver: undefined,
        };
    });
}
exports.prepareToggleTickerPreApproval = prepareToggleTickerPreApproval;
/**
 * @hidden
 */
function getAuthorization({ preApprove }) {
    return {
        permissions: {
            transactions: [
                preApprove ? types_1.TxTags.asset.PreApproveTicker : types_1.TxTags.asset.RemoveTickerPreApproval,
            ],
            assets: [],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const toggleTickerPreApproval = () => new internal_1.Procedure(prepareToggleTickerPreApproval, getAuthorization);
exports.toggleTickerPreApproval = toggleTickerPreApproval;
//# sourceMappingURL=toggleTickerPreApproval.js.map