"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAssetMediators = exports.getAuthorization = exports.prepareAddAssetMediators = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const constants_1 = require("../../utils/constants");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareAddAssetMediators(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { asset, asset: { ticker }, mediators: mediatorInput, } = args;
        const currentMediators = yield asset.getRequiredMediators();
        const newMediators = mediatorInput.map(mediator => (0, internal_2.asIdentity)(mediator, context));
        const mediatorsExistAsserts = newMediators.map(mediator => (0, internal_2.assertIdentityExists)(mediator));
        yield Promise.all(mediatorsExistAsserts);
        newMediators.forEach(({ did: newDid }) => {
            const alreadySetDid = currentMediators.find(({ did: currentDid }) => currentDid === newDid);
            if (alreadySetDid) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.ValidationError,
                    message: 'One of the specified mediators is already set',
                    data: { ticker, did: alreadySetDid.did },
                });
            }
        });
        const newMediatorCount = currentMediators.length + newMediators.length;
        if (newMediatorCount > constants_1.MAX_ASSET_MEDIATORS) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: `At most ${constants_1.MAX_ASSET_MEDIATORS} are allowed`,
                data: { newMediatorCount },
            });
        }
        const rawNewMediators = (0, conversion_1.identitiesToBtreeSet)(newMediators, context);
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        return {
            transaction: tx.asset.addMandatoryMediators,
            args: [rawTicker, rawNewMediators],
            resolver: undefined,
        };
    });
}
exports.prepareAddAssetMediators = prepareAddAssetMediators;
/**
 * @hidden
 */
function getAuthorization(args) {
    return {
        permissions: {
            transactions: [types_1.TxTags.asset.AddMandatoryMediators],
            portfolios: [],
            assets: [args.asset],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const addAssetMediators = () => new internal_1.Procedure(prepareAddAssetMediators, getAuthorization);
exports.addAssetMediators = addAssetMediators;
//# sourceMappingURL=addAssetMediators.js.map