"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.redeemNft = exports.prepareStorage = exports.getAuthorization = exports.prepareRedeemNft = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareRedeemNft(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, context: { polymeshApi: { tx }, }, storage: { fromPortfolio }, } = this;
        const { ticker, id } = args;
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const [{ free }] = yield fromPortfolio.getCollections({ collections: [ticker] });
        if (!free.find(heldNft => heldNft.id.eq(id))) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.InsufficientBalance,
                message: 'Portfolio does not hold NFT to redeem',
                data: {
                    nftId: id.toString(),
                },
            });
        }
        const rawId = (0, conversion_1.bigNumberToU64)(id, context);
        return {
            transaction: tx.nft.redeemNft,
            args: [rawTicker, rawId, (0, conversion_1.portfolioToPortfolioKind)(fromPortfolio, context)],
            resolver: undefined,
        };
    });
}
exports.prepareRedeemNft = prepareRedeemNft;
/**
 * @hidden
 */
function getAuthorization({ ticker }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { fromPortfolio }, } = this;
        return {
            permissions: {
                transactions: [types_1.TxTags.nft.RedeemNft],
                assets: [new internal_1.NftCollection({ ticker }, context)],
                portfolios: [fromPortfolio],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ from }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const { did } = yield context.getSigningIdentity();
        if (!from) {
            return { fromPortfolio: new internal_1.DefaultPortfolio({ did }, context) };
        }
        else if (from instanceof bignumber_js_1.default) {
            return { fromPortfolio: new internal_1.NumberedPortfolio({ did, id: from }, context) };
        }
        return {
            fromPortfolio: from,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const redeemNft = () => new internal_1.Procedure(prepareRedeemNft, getAuthorization, prepareStorage);
exports.redeemNft = redeemNft;
//# sourceMappingURL=redeemNft.js.map