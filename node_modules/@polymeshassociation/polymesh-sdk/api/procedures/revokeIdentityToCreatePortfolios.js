"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeIdentityToCreatePortfolios = exports.prepareRevokeIdentityToCreatePortfolios = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareRevokeIdentityToCreatePortfolios(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { portfolio: { revokeCreatePortfoliosPermission }, }, query, }, }, context, } = this;
        const { did } = args;
        const identity = (0, internal_2.asIdentity)(did, this.context);
        yield (0, internal_2.assertIdentityExists)(identity);
        const rawDidToRevoke = (0, conversion_1.stringToIdentityId)(identity.did, context);
        const signingIdentity = yield this.context.getSigningIdentity();
        const isInAllowedCustodians = yield query.portfolio.allowedCustodians(signingIdentity.did, identity.did);
        if (isInAllowedCustodians.isFalse) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The provided Identity is not in the list of allowed custodians',
            });
        }
        return {
            transaction: revokeCreatePortfoliosPermission,
            args: [rawDidToRevoke],
            resolver: undefined,
        };
    });
}
exports.prepareRevokeIdentityToCreatePortfolios = prepareRevokeIdentityToCreatePortfolios;
/**
 * @hidden
 */
const revokeIdentityToCreatePortfolios = () => new internal_1.Procedure(prepareRevokeIdentityToCreatePortfolios, {
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [],
    },
});
exports.revokeIdentityToCreatePortfolios = revokeIdentityToCreatePortfolios;
//# sourceMappingURL=revokeIdentityToCreatePortfolios.js.map