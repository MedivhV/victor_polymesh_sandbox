import { SubmittableResult } from '@polkadot/api';
import { Hash } from '@polkadot/types/interfaces';
import { SpRuntimeDispatchError } from "../polkadot/types-lookup.ts";
import { TypeDef } from '@polkadot/types/types';
import { BigNumber } from 'bignumber.js';
import { Context, PolymeshError } from "../internal";
import { TransactionArgument } from "../types";
export declare const processType: (rawType: TypeDef, name: string) => TransactionArgument;
/**
 * @hidden
 */
export declare const handleExtrinsicFailure: (error: SpRuntimeDispatchError, data?: Record<string, unknown> | undefined) => PolymeshError;
export declare const handleTransactionSubmissionError: (err: Error) => PolymeshError;
/**
 * @hidden
 *
 * given a transaction hash this will poll the chain until it is included in a finalized block
 *
 * @note this method should only be used when there is no subscription support for efficiency
 *
 * @throws if transaction is not found after a certain amount of time
 *
 * @param txHash The hash of the transaction
 * @param startingBlock The block number from before the transaction was submitted
 * @param context
 * @param pollOptions Controls max time to poll, defaults should be OK (finalization takes ~15 seconds)
 * @returns
 */
export declare const pollForTransactionFinalization: (txHash: Hash, startingBlock: BigNumber, context: Context, pollOptions?: {
    delayMs: number;
    maxAttempts: number;
}) => Promise<SubmittableResult>;
//# sourceMappingURL=utils.d.ts.map