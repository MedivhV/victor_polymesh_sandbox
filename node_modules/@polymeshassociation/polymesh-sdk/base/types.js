"use strict";
/* istanbul ignore file: already being tested somewhere else */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayingAccountType = exports.TransactionArgumentType = exports.TransactionStatus = void 0;
var TransactionStatus;
(function (TransactionStatus) {
    /**
     * the transaction is prepped to run
     */
    TransactionStatus["Idle"] = "Idle";
    /**
     * the transaction is waiting for the user's signature
     */
    TransactionStatus["Unapproved"] = "Unapproved";
    /**
     * the transaction is being executed
     */
    TransactionStatus["Running"] = "Running";
    /**
     * the transaction was rejected by the signer
     */
    TransactionStatus["Rejected"] = "Rejected";
    /**
     * the transaction was run successfully
     */
    TransactionStatus["Succeeded"] = "Succeeded";
    /**
     * the transaction's execution failed due to a an on-chain validation error, insufficient balance for fees, or other such reasons
     */
    TransactionStatus["Failed"] = "Failed";
    /**
     * the transaction couldn't be broadcast. It was either dropped, usurped or invalidated
     * see https://github.com/paritytech/substrate/blob/master/primitives/transaction-pool/src/pool.rs#L58-L110
     */
    TransactionStatus["Aborted"] = "Aborted";
})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
var TransactionArgumentType;
(function (TransactionArgumentType) {
    TransactionArgumentType["Did"] = "Did";
    TransactionArgumentType["Address"] = "Address";
    TransactionArgumentType["Text"] = "Text";
    TransactionArgumentType["Boolean"] = "Boolean";
    TransactionArgumentType["Number"] = "Number";
    TransactionArgumentType["Balance"] = "Balance";
    TransactionArgumentType["Date"] = "Date";
    TransactionArgumentType["Array"] = "Array";
    TransactionArgumentType["Tuple"] = "Tuple";
    TransactionArgumentType["SimpleEnum"] = "SimpleEnum";
    TransactionArgumentType["RichEnum"] = "RichEnum";
    TransactionArgumentType["Object"] = "Object";
    TransactionArgumentType["Unknown"] = "Unknown";
    TransactionArgumentType["Null"] = "Null";
})(TransactionArgumentType = exports.TransactionArgumentType || (exports.TransactionArgumentType = {}));
/**
 * Type of relationship between a paying account and a beneficiary
 */
var PayingAccountType;
(function (PayingAccountType) {
    /**
     * the paying Account is currently subsidizing the caller
     */
    PayingAccountType["Subsidy"] = "Subsidy";
    /**
     * the paying Account is paying for a specific transaction because of
     *   chain-specific constraints (e.g. the caller is accepting an invitation to an Identity
     *   and cannot have any funds to pay for it by definition)
     */
    PayingAccountType["Other"] = "Other";
    /**
     * the caller Account is responsible of paying the fees
     */
    PayingAccountType["Caller"] = "Caller";
})(PayingAccountType = exports.PayingAccountType || (exports.PayingAccountType = {}));
//# sourceMappingURL=types.js.map